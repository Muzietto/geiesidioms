// main idioms components
package (
  curried
  list
  fmap
  ap
  (<?>)
  (<*>)
)
{

  curried := \fun -> \value -> ? (fun.length <= 1) : (fun value) : curried(fun @ value);
  
  list := \...args -> ({
    is_functor: true,
    is_applicative: true,
    fmap : \...fabs -> list <<|
      fabs.reduce(\acc curr -> acc.concat(args.map curr), []),
    ap: \afa ->  args |>> afa.fmap,
    get: \index -> args.(index),
    toString: \_ -> '[' + args.toString() + ']'
  });
  
  fmap := \func1 -> \func2 -> func1.fmap func2;
  // cannot use <$>
  (<?>) := fmap;
  
  ap := \appl1 -> \appl2 -> appl1.ap appl2;
  (<*>) := ap;


}